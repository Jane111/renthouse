<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    	http://www.springframework.org/schema/beans    
        http://www.springframework.org/schema/beans/spring-beans.xsd    
        http://www.springframework.org/schema/context     
        http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx.xsd  
        http://www.springframework.org/schema/aop  
        http://www.springframework.org/schema/aop/spring-aop.xsd ">
	
	<!-- 注解扫描 -->
	<context:component-scan base-package="com.renthouse"/>
	
	<!-- AOP注解 -->
	<!-- <aop:aspectj-autoproxy/> -->
	
	<!-- 引入数据源 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!--  数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="initialSize" value="${initialSize}"></property>
        <property name="maxActive" value="${maxActive}"></property>
        <property name="maxIdle" value="${maxIdle}"></property>
        <property name="minIdle" value="${minIdle}"></property>
        <property name="maxWait" value="${maxWait}"></property>
        <!-- 开启无用链接的回收机制 true 是开启 当前的空闲链接数《2 且当前活动数》最大活动数-3 出发无用连接的回收 -->
        <property name="removeAbandoned" value="${removeAbandoned}"></property>
        <!-- 无用链接回收机制 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"></property>
        <!-- 开启Evict的定时校验，循环校验 -->
        <property name="testWhileIdle" value="true"></property>
        <!-- 定义事件间隔 单位毫秒 大于0的时候才会开启Evict -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <!-- 在进行borrowObject处理时，会对拿到的连接进行校验 默认是false -->
        <property name="testOnBorrow" value="false"></property>
        <!-- 在进行returnObject处理时，会对返回的连接进行校验 默认是false -->
        <property name="testOnReturn" value="false"></property>
        <!-- 校验使用的sql语句 validationQuery 复杂的校验sql会影响性能 告诉 数据库我还活着 -->
        <property name="validationQuery" value="select 1"></property>
        <!-- 每次校验所有的连接 -->
        <property name="numTestsPerEvictionRun" value="${maxActive}"></property>
    </bean>
    
    <!-- 配置sessionFactoryBean -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" lazy-init="false">
        <!-- 注入datasource，给sessionfactoryBean内setdatasource提供数据源 -->
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <!-- //加载实体类的映射文件位置及名称 -->
        <property name="mappingLocations" value="classpath:com/renthouse/entity/*.hbm.xml"></property>
    </bean>
    
    <!-- 配置Hibernate模版 -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
         <!-- 通过工厂获得Session,操作PO类 -->
         <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
	<!-- 定义事物管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    
    <!-- 使用注解 @Transactional 使用事物  -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
     
    <!-- 配置事务事务属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="register*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="do*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置事务切点，并把切点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.renthouse.action.*.*(..))" id="txPointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	<!-- <aop:config>
        <aop:pointcut expression="execution(* com.demo1.service.*.*(..))" id="pc"/>
        <aop:aspect ref="myAdvice" >
            指定名为before方法作为前置通知
            <aop:before method="before" pointcut-ref="pc" />
            后置返回
            <aop:after-returning method="afterReturning" returning="result" pointcut-ref="pc" />
            环绕通知
            <aop:around method="around" pointcut-ref="pc" />
            异常拦截通知
            <aop:after-throwing method="afterException" throwing="ex" pointcut-ref="pc"/>
            后置
            <aop:after method="after" pointcut-ref="pc"/>
        </aop:aspect>
    </aop:config> -->
	
	<!-- 配置切面类 -->
	<!-- <bean id="logPrint" class="com.demo1.log.LogPrint"></bean>
	进行 aop 的配置
	<aop:config>
		配置切入点表达式:哪些类的哪些方法需要进行增强
		<aop:pointcut id="mycut" expression="execution(* com.demo1.action.*.*(..))"/>
	    配置切面
	    <aop:aspect id="myaop" ref="logPrint">
		  	<aop:before pointcut-ref="mycut" method="doBefore"/>
		  	<aop:after-returning pointcut-ref="mycut" method="afterReturn"/>
		  	<aop:after-throwing pointcut-ref="mycut" method="afterThrowing"/>
		  	<aop:after pointcut-ref="mycut" method="doAfter"/>
		  	<aop:around pointcut-ref="mycut" method="around"/>
	  </aop:aspect>
	</aop:config> -->
	
	<!-- <bean id="testDao" class="com.demo1.dao.TestDao"></bean>
	
	<bean id="testService" class="com.demo1.service.TestService">
		<property name="testDao" ref="testDao"></property>
	</bean>
	
	<bean id="testAction" class="com.demo1.action.TestAction">
		<property name="testService" ref="testService"></property>
	</bean> -->
</beans>